grammar com.avaloq.tools.ddk.checkcfg.CheckCfg with org.eclipse.xtext.xbase.Xbase

import "http://www.avaloq.com/tools/ddk/checkcfg/CheckCfg"

import "http://www.avaloq.com/tools/ddk/check/Check" as check
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

CheckConfiguration:
  'check' 'configuration' name=ValidID
  (parameterConfigurations+=ConfiguredParameter)*
  (languageValidatorConfigurations+=ConfiguredLanguageValidator)*
  ( '{' (legacyCatalogConfigurations+=ConfiguredCatalog)* '}' )?
;

ConfiguredLanguageValidator:
  'for' language=QualifiedName '{'
    (parameterConfigurations+=ConfiguredParameter)*
    (catalogConfigurations+=ConfiguredCatalog)*
  '}'
;

ConfiguredCatalog:
  {ConfiguredCatalog}
  'catalog' catalog=[check::CheckCatalog|QualifiedName] '{'
  (parameterConfigurations+=ConfiguredParameter)*
  (checkConfigurations+=ConfiguredCheck)*
  '}'
;

ConfiguredCheck:
  {ConfiguredCheck}
  /* TODO configure severity? would require modifying the run-time so that not the severity of the annotation is used */
  severity=SeverityKind check=[check::Check|QualifiedName]
  ('(' parameterConfigurations+=ConfiguredParameter (',' parameterConfigurations+=ConfiguredParameter)* ')')?
;

ConfiguredParameter:
  {ConfiguredParameter}
  parameter=[check::FormalParameter|ValidID] '=' newValue=XFormalParameterDefaultValueLiteral
;

// defines restriction of supported parameter types. Copied from check
XSimpleFormalParameterDefaultValueLiteral returns xbase::XExpression:
  XBooleanLiteral |
  XNumberLiteral |
  XStringLiteral
;

XConstantUnaryOperation returns xbase::XExpression:
  {xbase::XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XConstantUnaryOperation
  | XSimpleFormalParameterDefaultValueLiteral
;

XFormalParameterDefaultValueLiteral returns xbase::XExpression:
  XConstantUnaryOperation |
  XConstantListLiteral
  // todo add support for enumerations
;

XConstantListLiteral returns xbase::XListLiteral:
  {xbase::XListLiteral} '#' '[' (elements+=XConstantUnaryOperation (',' elements+=XConstantUnaryOperation )*)? ']'
;

// copied from Check, enum cannot be referenced
enum SeverityKind:
  default='default' | error='error' | warning='warning' | info='info' | ignore='ignore'
;
